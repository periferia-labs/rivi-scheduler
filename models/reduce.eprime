language ESSENCE' 1.0

given queue_fams: int
given subgroup_size: int
given input_size: int
given output_size: int
given MAX_STEPS: int

find sizes: matrix indexed by [int(1..queue_fams), int(1..MAX_STEPS)] of int(
    0..input_size
)
find vecs: matrix indexed by [int(1..queue_fams)] of int(
    1..4
)

letting qf_iter be domain int(1..queue_fams)
letting phases_iter be domain int(1..MAX_STEPS)

such that

((sum q : qf_iter .
    sizes[q,1]) = input_size),

(forAll q : qf_iter .
    sizes[q,1] <= subgroup_size * subgroup_size * vecs[q]),

(forAll q : qf_iter .
   sizes[q,1] = 0 ->
        forAll k : phases_iter .
            sizes[q,k] = 0)
,

(forAll q : qf_iter .
forAll p : phases_iter .
    (sizes[q,p] > subgroup_size * vecs[p] ->
        (exists k : phases_iter .
            sizes[q,k] = sizes[q,p] / subgroup_size / vecs[q]))
        /\
        (forAll k : phases_iter .
            k < p -> sizes[q,k] >= sizes[q,p])
    /\
    (sizes[q,p] <= subgroup_size * vecs[p] /\ sizes[q,p] > 0 ->
        (exists k : phases_iter .
            sizes[q,k] = output_size))
)
