language ESSENCE' 1.0

given queue_fams: int
given subgroup_size: int
given input_size: int

letting Skip = 0
letting Reduce = 1
letting Sync = 2

find sizes: matrix indexed by [int(1..queue_fams), int(1..5)] of int(
    0..input_size
)
find vecs: matrix indexed by [int(1..4)] of int(
    1..4
)

letting queue_fams_iter be domain int(1..queue_fams)
letting phases_iter be domain int(1..5)

such that

((sum q : queue_fams_iter . sizes[q,1]) = input_size),

forAll q : queue_fams_iter .
    (sizes[q,1] >= subgroup_size ->
        sizes[q,2] = sizes[q,1] / subgroup_size / vecs[q]
            $+ toInt((sizes[q,1] % (subgroup_size * vecs[q]) > 0))
        /\
        $ division rounds down so we also need modulo
        $ sizes[q,1] % (subgroup_size * vecs[q]) = 0
        $ /\
        sizes[q,2] <= subgroup_size)
    /\
    (sizes[q,1] = 0 ->
        forAll p : int(2..5) . sizes[q, p] = 0)
,

forAll q : queue_fams_iter.
forAll p : int(2..5) .
    ((sum s : int(1..p) . sizes[q,s] = 0) = 1 -> sizes[q,p] = 1)
    /\
    (sizes[q,p] = 1 -> forAll s : int(p..5) . sizes[q, s] = 1)
